{
    "contents" : "# set working directory\n# setwd(\"/home/krzysztof/projects/pracuj/analysis\")\n\n# import packages\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(maptools)\nlibrary(rgeos)\nlibrary(SmarterPoland) # contains ggplot2\n\n# read data to analyze\ndf <- read.csv(\"../Filtr/pracuj_filtered.csv\",\n               stringsAsFactors=F, fileEncoding=\"WINDOWS-1250\")\n\n# leave only unique offers\npracuj <- df %>%\n filter(!duplicated(id))\n\n# In location parameter abroad jobs contain either only country's name\n# or \"city, country\" structure. Need to separate them from polish offers which\n# mostly have \"city, province\" structure. Sometimes it is only province,\n# couple of cities in one province (e.g. \"Gdañsk, Gdynia, Sopot, pomorskie\")\n# or bunch of towns from across the country.\n\n# vector of all europan countires\neuro <- c(\"Albania\", \"Andora\", \"Anglia\", \"Austria\", \"Belgia\", \"Bia³oruœ\",\n          \"Boœnia i Hercegowina\", \"Bu³garia\", \"Chorwacja\", \"Cypr\",\n          \"Czarnogóra\", \"Czechy\", \"Dania\", \"Estonia\", \"Finlandia\", \n          \"Francja\", \"Gibraltar\", \"Grecja\", \"Gruzja\", \"Hiszpania\",\n          \"Holandia\", \"Irlandia\", \"Islandia\", \"Kazachstan\", \"Liechtenstein\",\n          \"Litwa\", \"Luksemburg\", \"£otwa\", \"Macedonia\", \"Malta\", \"Monako\",\n          \"Mo³dawia\", \"Niemcy\", \"Norwegia\", \"Polska\", \"Portugalia\", \"Rosja\",\n          \"Rumunia\", \"San Marino\", \"Serbia\", \"Szwajcaria\", \"Szwecja\",\n          \"S³owacja\", \"S³owenia\", \"Turcja\", \"Ukraina\", \"Watykan\",\n          \"Wielka Brytania\", \"Wêgry\", \"W³ochy\")\n\n# find abroad jobs\ninlist <- lapply(euro, function(x) {grep(x, pracuj$location)})\n\n# separate abroad jobs indexes\nabjob <- c()\nfor (i in 1:length(inlist)) {\n  if (length(inlist[[i]]) != 0) {\n    abjob <- append(abjob, inlist[[i]])\n  }\n}\n\n# --- FOREIGN OFFERS --- #\n\n# filter abroad positions\nforeign <- pracuj[abjob, ]\n\n# paste \"NA, \" into foreign positions without cities\n# for later column separation\nfor (i in 1:length(foreign$location)) {\n  if (!grepl(\", \", foreign$location[i])) {\n    foreign$location[i] <- paste0(NA, \", \", foreign$location[i])\n  }\n}\n\n# separate foreign locations to c(city, country) structure, convert NA strings\nforeign <- foreign %>%\n  separate(location, c(\"city\", \"country\"), sep=\", \", convert=T)\n\n# substitute doubled country names in city column with NA\nfor (i in 1:length(foreign$city)) {\n  if(foreign$city[i] %in% euro) {\n    foreign$city[i] <- NA\n  }\n}\n\n# --- POLISH OFFERS --- #\n\n# filter polish positions, take \npolish <- pracuj[-abjob, ]\n\n# get multiple cities positions\nmulCit <- polish %>%\n  filter(grepl(\",.*,\", polish$location))\n\n# erase them from data.frame\npolish <- polish[-grep(\",.*,\", polish$location), ]\n\n# split strings into cities and porvinces\ncitiesProv <- strsplit(mulCit$location, \", \")\n\n# paste \"NA, \" into polish positions without cities for later column separation\nfor (i in 1:length(polish$location)) {\n  if (!grepl(\", \", polish$location[i])) {\n    polish$location[i] <- paste0(NA, \", \", polish$location[i])\n  }\n}\n\n# separate polish locations to c(city, province) structure, convert NA strings\npolish <- polish %>%\n  separate(location, c(\"city\", \"province\"), sep=\", \", convert=T)\n\n# change location column name to province\n# add fake city column to multiple cities positions\nfakeCol <- which(names(mulCit) == \"location\")\nnames(mulCit)[fakeCol] <- \"province\"\nmulCit <- cbind(mulCit[, 1:(fakeCol - 1)],\n                city = rep(0, nrow(mulCit)),\n                mulCit[, (fakeCol):length(names(mulCit))])\n\n# append multiple cities positions as single rows\nfor (i in 1:length(citiesProv)) {\n  for (j in 1:(length(citiesProv[[i]]) - 1)) {\n    polish[nrow(polish) + 1, ] <- mulCit[i, ]\n    polish$city[nrow(polish)] <- citiesProv[[i]][j]\n    polish$province[nrow(polish)] <- citiesProv[[i]][length(citiesProv[[i]])]\n  }\n}\n\n# --- MAP --- #\n\n# read provinces shapes data\nshp <- readShapePoly(\"POL_adm_shp/POL_adm1.shp\")\n\n# vector of provinces in order as they appear in shp@data$VARNAME_1\nprovinces <- c(\"³ódzkie\", \"œwiêtokrzyskie\", \"wielkopolskie\",\n               \"kujawsko-pomorskie\", \"ma³opolskie\", \"dolnoœl¹skie\",\n               \"lubelskie\", \"lubuskie\", \"mazowieckie\", \"opolskie\", \"podlaskie\",\n               \"pomorskie\", \"œl¹skie\", \"podkarpackie\", \"warmiñsko-mazurskie\",\n               \"zachodniopomorskie\")\n\n# substitute to names with polish signs\nshp@data$VARNAME_1 <- provinces\n\n# fortify data\nshpf <- fortify(shp, region=\"VARNAME_1\")\n\n# PROVINCES\n\n# create data.frame for map filling\noffersPerProvince <- data.frame(table(polish$province), stringsAsFactors=F)\nnames(offersPerProvince) <- c(\"province\", \"n\")\n\n# CITIES\n\n# create data.frame for map filling\noffersPerCity <- data.frame(table(polish$city), stringsAsFactors=F)\nnames(offersPerCity) <- c(\"city\", \"n\")\n\n# read cities geographical coordinates\ncitiesGC <- read.csv(\"citiesGC.csv\",\n                     stringsAsFactors=F, fileEncoding=\"WINDOWS-1250\")\n\n# merge data.frames\noffersPerCity <- merge(offersPerCity, citiesGC, all.x=T)\n\n# get missing coordinates and save them\nif (sum(is.na(offersPerCity$lat)) != 0) {\n  for (i in which(is.na(offersPerCity$lat))) {\n    coords <- getGoogleMapsAddress(street=\"\",\n                                   city=offersPerCity$city[i])\n    offersPerCity$lat[i] <- coords[1]\n    offersPerCity$long[i] <- coords[2]\n  }\n\n  offersPerCity %>%\n    select(-n) %>%\n    rbind(citiesGC) %>%\n    unique() %>%\n    arrange(city) %>%\n    write.csv(\"citiesGC.csv\", row.names=F, fileEncoding=\"WINDOWS-1250\")\n}\n\n# cut data\noffersPerCity <- offersPerCity %>%\n  mutate(interval = cut(offersPerCity$n,\n                        c(0, 1, 10, 50, 100, 200, 300, max(offersPerCity$n))))\nlevels(offersPerCity$interval)[1] <- 1\n\n# COMPANIES\n\n# create data.frame for map filling\noffersPerCompany <- data.frame(table(polish$employer), stringsAsFactors=F)\nnames(offersPerCompany) <- c(\"company\", \"n\")\n\noffersVsCompanies <- offersPerCompany %>%\n  group_by(n) %>%\n  summarise(companies = n_distinct(company))\n\n# PLOTS\n\n# create province plot\nprovinceMap <- ggplot() +\n  # fill by number of offers\n  geom_map(data=offersPerProvince,\n           aes(map_id=province, fill=n),\n           map=shpf) +\n  # map contours\n  geom_path(data=shpf,\n            aes(x=long, y=lat, group=id),\n            colour=\"black\", size=0.25) +\n  # mercator projection\n  coord_map(projection=\"mercator\") +\n  # change theme\n  theme_bw() +\n  # change fill name and color\n  scale_fill_gradient(\"Liczba ofert\", low = \"grey90\", high = \"black\") +\n  # remove unnecessary elements\n  theme(axis.ticks=element_blank(), panel.border=element_blank(),\n        axis.text=element_blank(), panel.grid=element_blank(),\n        axis.title=element_blank()) +\n  # add title\n  ggtitle(\"Ile ofert w województwie?\")\n\n# create city plot\ncityMap <- ggplot(offersPerCity, aes(x=long, y=lat, col=interval)) +\n  # color by number of offers\n  geom_point(alpha=0.7) +\n  # cities names\n  geom_text(data=offersPerCity[offersPerCity$n > 100, ],\n            aes(label=city), hjust=-0.1, show.legend=F) +\n  # map contours\n  geom_path(data=shpf,\n            aes(group=id),\n            colour=\"black\", size=0.25) +\n  # mercator projection\n  coord_map(projection=\"mercator\") +\n  # change theme\n  theme_bw() +\n  # change fill name and color\n  scale_color_brewer(\"Liczba ofert\", palette=\"Dark2\") +\n  # remove unnecessary elements\n  theme(axis.ticks=element_blank(), panel.border=element_blank(),\n        axis.text=element_blank(), panel.grid=element_blank(),\n        axis.title=element_blank(), legend.key=element_blank()) +\n  # add title\n  ggtitle(\"Ile ofert w mieœcie?\")\n\n# create company plot\n  companyScatter <- ggplot(offersVsCompanies, aes(x=companies, y=n)) +\n  # visualize data\n  geom_point() +\n  # company with most offers\n  geom_text(data=offersPerCompany[which.max(offersPerCompany$n), ],\n            aes(x=1, y=n, label=company), hjust=-0.1) +\n  # scale axes\n  scale_x_log10(\"Liczba firm\", breaks=c(1, 2^(1:10))) +\n  scale_y_continuous(\"Liczba ofert\", breaks=c(1, seq(5, 100, 5))) +\n  # remove unnecessary elements\n  theme(panel.grid.minor.x=element_blank()) +\n  # add title\n  ggtitle(\"Ile firm z³o¿y³o konkretn¹ liczbê ofert?\")\n\n# plots\nprovinceMap\ncityMap\ncompanyScatter\n\n# # create company plot\n# companyBar <- ggplot(offersPerCompany, aes(x=company, y=n)) +\n#   # bars by number of offers\n#   geom_bar(stat=\"identity\") +\n#   coord_flip()\n",
    "created" : 1456269755992.000,
    "dirty" : false,
    "encoding" : "WINDOWS-1252",
    "folds" : "",
    "hash" : "2199906176",
    "id" : "66946EAA",
    "lastKnownWriteTime" : 1456268348,
    "path" : "D:/eR/analysis/pracuj_analysis.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}